// <auto-generated />
using System;
using IVY.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IVYDashboard.API.Migrations
{
    [DbContext(typeof(IVYDbContext))]
    partial class IVYDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IVY.Domain.Models.Category", b =>
                {
                    b.Property<int>("Category__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Category__Id"));

                    b.Property<string>("Category__Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category__Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IVY.Domain.Models.Collection", b =>
                {
                    b.Property<int>("Collection__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Collection__Id"));

                    b.Property<string>("Collection__Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Collection__Status")
                        .HasColumnType("int");

                    b.HasKey("Collection__Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("IVY.Domain.Models.Color", b =>
                {
                    b.Property<int>("Color__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Color__Id"));

                    b.Property<string>("Color__Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Color__Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("IVY.Domain.Models.Product", b =>
                {
                    b.Property<int>("Product__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Product__Id"));

                    b.Property<DateTime>("Product__CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Product__Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Product__SeasonId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Product__Sold")
                        .HasColumnType("int");

                    b.Property<byte>("Product__Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Product__UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Product__Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategory__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategory__Id"));

                    b.Property<int>("ProductCategory__CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("ProductCategory__IsEvent")
                        .HasColumnType("bit");

                    b.Property<int>("ProductCategory__ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategory__Status")
                        .HasColumnType("int");

                    b.HasKey("ProductCategory__Id");

                    b.HasIndex("ProductCategory__CategoryId");

                    b.HasIndex("ProductCategory__ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductCollection", b =>
                {
                    b.Property<int>("ProductCollection__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCollection__Id"));

                    b.Property<int>("ProductCollection__CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCollection__ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCollection__Id");

                    b.HasIndex("ProductCollection__CollectionId");

                    b.HasIndex("ProductCollection__ProductId");

                    b.ToTable("ProductCollections");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductColor", b =>
                {
                    b.Property<int>("ProductColor__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductColor__Id"));

                    b.Property<int>("ProductColor__ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductColor__CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ProductColor__Discount")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ProductColor__FactoryGatePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductColor__Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductColor__Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductColor__ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductColor__Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ProductColor__UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductColor__Id");

                    b.HasIndex("ProductColor__ColorId");

                    b.HasIndex("ProductColor__ProductId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductColorFile", b =>
                {
                    b.Property<int>("ProductFile__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductFile__Id"));

                    b.Property<int>("ProductColor__Id")
                        .HasColumnType("int");

                    b.Property<string>("ProductFile__Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductFile__Id");

                    b.HasIndex("ProductColor__Id");

                    b.ToTable("ProductColorFiles");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductFavorite", b =>
                {
                    b.Property<int>("ProductFavorite__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductFavorite__Id"));

                    b.Property<int>("ProductFavorite__ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductFavorite__Id");

                    b.HasIndex("ProductFavorite__ProductId");

                    b.ToTable("ProductFavorites");
                });

            modelBuilder.Entity("IVY.Domain.Models.Size", b =>
                {
                    b.Property<int>("Size__Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Size__Id"));

                    b.Property<int?>("ProductColor__Id")
                        .HasColumnType("int");

                    b.Property<int>("Size__L")
                        .HasColumnType("int");

                    b.Property<int>("Size__M")
                        .HasColumnType("int");

                    b.Property<int>("Size__ProductColorId")
                        .HasColumnType("int");

                    b.Property<int>("Size__S")
                        .HasColumnType("int");

                    b.Property<int>("Size__XL")
                        .HasColumnType("int");

                    b.Property<int>("Size__XXl")
                        .HasColumnType("int");

                    b.HasKey("Size__Id");

                    b.HasIndex("ProductColor__Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("IVY.Domain.Models.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberConfirmed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("IVY.Domain.Models.Users.EmployeeIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductCategory", b =>
                {
                    b.HasOne("IVY.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategory__CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVY.Domain.Models.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductCategory__ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductCollection", b =>
                {
                    b.HasOne("IVY.Domain.Models.Collection", "Collection")
                        .WithMany("ProductCollections")
                        .HasForeignKey("ProductCollection__CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVY.Domain.Models.Product", "Product")
                        .WithMany("ProductCollections")
                        .HasForeignKey("ProductCollection__ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductColor", b =>
                {
                    b.HasOne("IVY.Domain.Models.Color", "Color")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductColor__ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVY.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductColor__ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductColorFile", b =>
                {
                    b.HasOne("IVY.Domain.Models.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColor__Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("IVY.Domain.Models.ProductFavorite", b =>
                {
                    b.HasOne("IVY.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductFavorite__ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IVY.Domain.Models.Size", b =>
                {
                    b.HasOne("IVY.Domain.Models.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColor__Id");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("IVY.Domain.Models.Users.EmployeeIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("IVY.Domain.Models.Users.EmployeeIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVY.Domain.Models.Users.EmployeeIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("IVY.Domain.Models.Users.EmployeeIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IVY.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IVY.Domain.Models.Collection", b =>
                {
                    b.Navigation("ProductCollections");
                });

            modelBuilder.Entity("IVY.Domain.Models.Color", b =>
                {
                    b.Navigation("ProductColors");
                });

            modelBuilder.Entity("IVY.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductCollections");

                    b.Navigation("ProductColors");
                });
#pragma warning restore 612, 618
        }
    }
}
